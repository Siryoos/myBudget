# Multi-stage build for backend
FROM node:18-alpine AS base

# Install dependencies for node-gyp
RUN apk add --no-cache python3 make g++ curl

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including devDependencies for tsx)
RUN npm ci && npm cache clean --force

# Copy source code
COPY . .

# Build the Next.js application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Install curl for health checks
RUN apk add --no-cache curl

# Create app user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy built application and dependencies
COPY --from=base --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=base --chown=nodejs:nodejs /app/package*.json ./
COPY --from=base --chown=nodejs:nodejs /app/.next ./.next
COPY --from=base --chown=nodejs:nodejs /app/app ./app
COPY --from=base --chown=nodejs:nodejs /app/lib ./lib
COPY --from=base --chown=nodejs:nodejs /app/types ./types
COPY --from=base --chown=nodejs:nodejs /app/next.config.js ./
COPY --from=base --chown=nodejs:nodejs /app/tsconfig.json ./
COPY --from=base --chown=nodejs:nodejs /app/tsconfig.server.json ./

# Create necessary directories
RUN mkdir -p logs uploads && chown -R nodejs:nodejs logs uploads

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3001/health || exit 1



# Start the application
CMD ["npm", "start"]
