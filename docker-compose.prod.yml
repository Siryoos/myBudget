version: '3.8'

services:
  # Main Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: smartsave-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/smartsave_prod
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - NEXT_PUBLIC_API_URL=https://api.yourdomain.com
      - MONITORING_ENABLED=true
      - LOG_LEVEL=info
      - RATE_LIMIT_WINDOW=900000
      - RATE_LIMIT_MAX=1000
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
      - init
    networks:
      - smartsave-network
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (Internal only in production)
  postgres:
    image: postgres:15-alpine
    container_name: smartsave-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=smartsave_prod
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    # No external ports in production for security
    networks:
      - smartsave-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Internal only in production)
  redis:
    image: redis:7-alpine
    container_name: smartsave-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    # No external ports in production for security
    networks:
      - smartsave-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: smartsave-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend

  # One-off migrations runner (executes then exits)
  migrations:
    profiles: ["maintenance"]
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: smartsave-migrations
    restart: "no"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/smartsave_prod
    depends_on:
      - postgres
    networks:
      - smartsave-network
    command: ["npm", "run", "db:security-migrate"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h postgres"]
      interval: 15s
      timeout: 5s
      retries: 3

  # One-off seeding runner (executes then exits)
  seed:
    profiles: ["maintenance"]
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: smartsave-seed
    restart: "no"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/smartsave_prod
    depends_on:
      - postgres
      - migrations
    networks:
      - smartsave-network
    command: ["npm", "run", "db:setup"]

  # Umbrella init (migrate + seed) runner (executes then exits)
  init:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: smartsave-init
    restart: "no"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/smartsave_prod
    depends_on:
      - postgres
    networks:
      - smartsave-network
    command: ["sh", "./scripts/docker-init.sh"]
    networks:
      - smartsave-network

  # Monitoring - Prometheus (Internal only in production)
  prometheus:
    image: prom/prometheus:latest
    container_name: smartsave-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    # No external ports in production for security
    networks:
      - smartsave-network

  # Monitoring - Grafana (Internal only in production)
  grafana:
    image: grafana/grafana:latest
    container_name: smartsave-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_ADMIN_PASSWORD:-admin123_secure}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    # No external ports in production for security
    networks:
      - smartsave-network
    depends_on:
      - prometheus

  # Log Aggregation - Loki (Internal only in production)
  loki:
    image: grafana/loki:latest
    container_name: smartsave-loki
    restart: unless-stopped
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    # No external ports in production for security
    networks:
      - smartsave-network

  # Log Shipping - Promtail (Internal only in production)
  promtail:
    image: grafana/promtail:latest
    container_name: smartsave-promtail
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
      - ./logs:/var/log/smartsave
    command: -config.file=/etc/promtail/config.yml
    networks:
      - smartsave-network
    depends_on:
      - loki

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  smartsave-network:
    driver: bridge
