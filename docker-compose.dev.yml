# Docker Compose development overrides
# Use with: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

services:
  # Frontend with development settings
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: runner  # Use runner stage for development
      args:
        JWT_SECRET: ${JWT_SECRET}
        DB_PASSWORD: ${DB_PASSWORD}
        REDIS_PASSWORD: ${REDIS_PASSWORD}
        ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
        NODE_ENV: ${NODE_ENV:-development}
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3001}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
    volumes:
      - .:/app
      - /app/node_modules
      - ./public:/app/public
      - ./locales:/app/locales
    command: ["npm", "run", "dev"]
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Database with development settings
  postgres:
    environment:
      POSTGRES_DB: ${DB_NAME:-mybudget}
      POSTGRES_USER: ${DB_USER:-mybudget}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
      - ./database/dev-data:/docker-entrypoint-initdb.d/dev-data
    ports:
      - "127.0.0.1:5432:5432"

  # Redis with development settings
  redis:
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "127.0.0.1:6379:6379"

  # MinIO with development settings
  minio:
    environment:
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL:-http://localhost:9001}
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:9001:9001"

  # Keycloak with development settings
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      KC_HOSTNAME: ${KC_HOSTNAME:-localhost}
      KC_HOSTNAME_ADMIN: ${KC_HOSTNAME_ADMIN:-localhost}
    ports:
      - "127.0.0.1:8080:8080"
      - "127.0.0.1:8443:8443"

  # Nginx with development settings
  nginx:
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx

  # Development tools (optional)
  # Uncomment to enable additional development services
  
  # # pgAdmin for database management
  # pgadmin:
  #   image: dpage/pgadmin4:latest
  #   container_name: mybudget-pgadmin
  #   restart: unless-stopped
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@mybudget.com
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
  #   ports:
  #     - "127.0.0.1:5050:80"
  #   depends_on:
  #     - postgres
  #   networks:
  #     - mybudget-network

  # # Redis Commander for Redis management
  # redis-commander:
  #   image: rediscommander/redis-commander:latest
  #   container_name: mybudget-redis-commander
  #   restart: unless-stopped
  #   environment:
  #     REDIS_HOSTS: local:redis:6379
  #     REDIS_PASSWORD: ${REDIS_PASSWORD}
  #   ports:
  #     - "127.0.0.1:8081:8081"
  #   depends_on:
  #     - redis
  #   networks:
  #     - mybudget-network

  # # MailHog for email testing
  # mailhog:
  #   image: mailhog/mailhog:latest
  #   container_name: mybudget-mailhog
  #   restart: unless-stopped
  #   ports:
  #     - "127.0.0.1:1025:1025"  # SMTP
  #     - "127.0.0.1:8025:8025"  # Web UI
  #   networks:
  #     - mybudget-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  mybudget-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: mybudget-br0
