# Docker Compose development overrides

# Development overrides for docker-compose.yml
# Use with: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

services:
  # Backend with development settings
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: base  # Use base stage for development
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - PORT=3001
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    command: ["npm", "run", "dev"]
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Frontend with development settings
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: base  # Use base stage for development
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
    volumes:
      - .:/app
      - /app/node_modules
      - ./public:/app/public
      - ./locales:/app/locales
    command: ["npm", "run", "dev"]
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy

  # Database with development settings
  postgres:
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
      - ./database/dev-data:/docker-entrypoint-initdb.d/dev-data
    ports:
      - "5432:5432"

  # Redis with development settings
  redis:
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"

  # Development tools (optional)
  # Uncomment to enable additional development services
  
  # # pgAdmin for database management
  # pgadmin:
  #   image: dpage/pgadmin4:latest
  #   container_name: mybudget-pgadmin
  #   restart: unless-stopped
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@mybudget.com
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
  #   ports:
  #     - "5050:80"
  #   depends_on:
  #     - postgres
  #   networks:
  #     - mybudget-network

  # # Redis Commander for Redis management
  # redis-commander:
  #   image: rediscommander/redis-commander:latest
  #   container_name: mybudget-redis-commander
  #   restart: unless-stopped
  #   environment:
  #     REDIS_HOSTS: local:redis:6379
  #     REDIS_PASSWORD: ${REDIS_PASSWORD}
  #   ports:
  #     - "8081:8081"
  #   depends_on:
  #     - redis
  #   networks:
  #     - mybudget-network

  # # MailHog for email testing
  # mailhog:
  #   image: mailhog/mailhog:latest
  #   container_name: mybudget-mailhog
  #   restart: unless-stopped
  #   ports:
  #     - "1025:1025"  # SMTP
  #     - "8025:8025"  # Web UI
  #   networks:
  #     - mybudget-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  mybudget-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
